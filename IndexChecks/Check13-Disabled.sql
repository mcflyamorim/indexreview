/* 
Check13 - Disabled indexes

Description:
Reporting min and max values for date columns for tables greater than 1mi rows.
This is useful to identify tables storing old data and are good candidates to purged/archive/remove, or maybe apply partitioning.

Estimated Benefit:
Medium

Estimated Effort:
Low

Recommendation:
Quick recommendation:
Review and remove disabled indexes that are no longer needed.

Detailed recommendation:
While a disabled index may seem harmless, it can have a negative impact on the performance of SQL Server databases. This is because SQL Server will continue to maintain the index statistics, even though the index is not being used. As a result, the statistics will become stale and outdated, which can lead to incorrect execution plans being generated by the query optimizer.
Incorrect execution plans can result in slower query performance, as SQL Server may choose a suboptimal query plan. This can lead to increased CPU and I/O usage, which can impact the overall performance of the database.
In addition, disabled indexes can consume disk space, which can be a concern for databases with limited storage capacity. Disabled indexes also need to be maintained, which can be a time-consuming process that requires resources and can impact the performance of other operations.
Therefore, it is important to periodically review and remove disabled indexes that are no longer needed or causing performance issues in SQL Server databases.

Note 1: To minimize the risks associated with removing disabled indexes, it is important to carefully evaluate the impact of the removal and perform the necessary testing and validation before making any changes to the database schema.
Note 2: Make sure there are no dependencies of the indexes, like hard-coded indexes in modules.
Note 3: Some applications may require specific indexes to work, in addition, some app vendors will consider environment non-supported if database schema is changed.
*/



SET NOCOUNT ON; SET ARITHABORT OFF; SET ARITHIGNORE ON; 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SET LOCK_TIMEOUT 60000; /*60 seconds*/
SET DATEFORMAT MDY

IF OBJECT_ID('dbo.tmpIndexCheck13') IS NOT NULL
  DROP TABLE dbo.tmpIndexCheck13

SELECT 'Check 13 - Disabled indexes' AS [Info],
        a.Database_Name,
        a.Schema_Name,
        a.Table_Name,
        a.Index_Name,
        a.Index_Type,
        a.indexed_columns,
        a.Number_Rows AS current_number_of_rows_table,
        a.ReservedSizeInMB,
        user_seeks + user_scans + user_lookups + user_updates AS number_of_access_on_index_table_since_last_restart_or_rebuild,
        a.last_datetime_obj_was_used,
        a.[is_disabled],
        CASE
            WHEN [is_disabled] = 1 THEN
                '[WARNING: Index is disabled. Revise the need to maintain these]'
            ELSE
                'OK'
        END AS [Comment]
   INTO dbo.tmpIndexCheck13
   FROM dbo.Tab_GetIndexInfo AS a
  WHERE [is_disabled] = 1

SELECT * FROM dbo.tmpIndexCheck13
 ORDER BY current_number_of_rows_table DESC, 
          Database_Name,
          Schema_Name,
          Table_Name,
          ReservedSizeInMB DESC,
          Index_Name